version: "3"

networks:
  proxy:
    external: true

services:

  traefik:
    image: "traefik:latest"
    container_name: "traefik-router"
    env_file:
      - ".env"
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.python.address=:8000"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.email=${EMAIL}"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
    labels:
      traefik.enable: "true"
      traefik.docker.network: "proxy"
      traefik.http.routers.http-catchall.rule: "hostregexp(`{host:(www\\.)?.+}`)"
      traefik.http.routers.http-catchall.entrypoints: web
      traefik.http.routers.http-catchall.middlewares: redirect-to-https
      traefik.http.routers.https-catchall.rule: "hostregexp(`{host:(www\\.).+}`)"
      traefik.http.routers.https-catchall.entrypoints: websecure
      traefik.http.routers.https-catchall.tls: "true"
      traefik.http.middlewares.redirect-to-https.redirectregex.regex: "^https?://(?:www\\.)?(.+)"
      traefik.http.middlewares.redirect-to-https.redirectregex.replacement: "https://$${1}"
      traefik.http.middlewares.redirect-to-https.redirectregex.permanent: "true"
    ports:
      - "80:80"
      - "443:443"
      - "8000:8000"
    networks:
      - "proxy"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

#  whoami:
#   image: traefik/whoami
#   container_name: "whoami_checker"
#   labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.whoami.rule=Host(`${DOMAIN}`)"
#      - "traefik.http.routers.whoami.rule=Host(`www.${DOMAIN}`)"
#      - "traefik.http.routers.whoami.entrypoints=websecure"
#      #- "traefik.http.routers.whoami.tls.certresolver=le"
#   env_file:
#     - ".env"
#   networks:
#     - "proxy"

  web-nginx:
    image: nginx:alpine
    restart: always
    container_name: "web-nginx"
    volumes:
       - "./nginx-data:/usr/share/nginx:ro"
    networks:
      - "proxy"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.tls.certresolver=le"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
      - "traefik.docker.network=proxy"
    env_file:
      - ".env"

  python:
    image: python:3.8-slim-buster
    restart: always
    container_name: "python-slim-buster"
    command: python -m http.server 8000
    volumes:
      - "./python-data:/python-data"
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.python.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.python.entrypoints=python"
      - "traefik.tcp.routers.python.service=python"
      - "traefik.tcp.services.python.loadbalancer.server.port=8000"
      - "traefik.docker.network=proxy"
    networks:
      - "proxy"
    env_file:
      - ".env"
    depends_on:
      - postgres-database

  postgres-database:
   image: postgres:alpine
   restart: always
   container_name: "postgres-database"
   volumes:
      - "./postgres-data/var/lib/postgresql:/var/lib/postgresql"
   environment:
     POSTGRES_USER: test_user
     POSTGRES_PASSWORD: test123
     POSTGRES_DB: test_database
   networks:
     - "proxy"

  redis-database:
      image: redis:alpine
      restart: always
      container_name: "redis-database"
      command: redis-server --appendonly yes
      volumes:
        - "./redis-data:/data"
      networks:
        - "proxy"
